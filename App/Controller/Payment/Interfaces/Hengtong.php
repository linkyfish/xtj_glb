<?php

namespace Payment\Interfaces;

class Hengtong extends Order
{


    public function create($usrid, $money, $Type, $config)
    {
        $order = parent::create($usrid, $money, $Type, $config); // TODO: Change the autogenerated stub
        $this->AppUrl = $config['AppUrl'];
        $PayType = 'alipay_sm';
        //empty($config['AppSess']) && $config['AppSess']='alipay_sm';

        switch ($Type) {
            case 10:
                $PayType = 'wxpay_sm';
                break;
            case 20:
                $PayType = 'alipay_sm';

                break;
            case 30:
                $PayType = 'quick';
                break;
            case 50:
                $PayType = 'uppay';
                break;
            default:
                $this->app->response('0001', [], '支付通道暂时关闭');

        }
        /*
         *
        alipay:支付宝；
        alipay_sm:支付宝扫码；
        wxpay:微信支付；
        wxpay_sm:微信扫码；
        qqpay:QQ钱包；
        jdpay:京东钱包；
        uppay：银联云闪付；
        quick：银联快捷
         */

        $time = date('YmdHis');
        $formData = [
            'Amount' => $order['Money'],
            'MerId' => $config['AppID'],
            'MerOrderNo' => $order['OrderNo'],
            'MerOrderTime' => $time,
            'NotifyUrl' => $this->NotifyUrl,
            'Version' => 3,
            'PayType' => $PayType,
        ];

        ksort($formData);
        $content = sprintf("Amount=%s&MerId=%s&MerOrderNo=%s&MerOrderTime=%s&NotifyUrl=%s&PayType=%s&Version=3&key=%s", $order['Money'], $config['AppID'], $order['OrderNo'], $time, $this->NotifyUrl, $PayType, $config['AppKey']);
        $formData['Sign'] = strtoupper(md5($content));
        $data = $this->api('/order/pay', $formData, ['Content-Type' => 'application/x-www-form-urlencoded']);

        if ($data['code'] == 'success') {
            $this->app->Order->update(['ID' => $order['ID']], ['PayOrderNo' => $data['data']['PayOrderNo']]);
            $this->app->response('0000', [], '下单成功', $data['data']['PayUrl'], 302);
        } else {
            $this->app->response('0001', [], '下单失败');
        }
    }


    public function Notify($order, $data, $config)
    {
        if ($order['Status'] == 1) {
            return 'success';
        }
        $sign = $data['Sign'];
        unset($data['Sign']);
        $_data = [
            'Amount' => $data['Amount'],
            'AmountReal' => $data['AmountReal'],
            'BalanceTime' => $data['BalanceTime'],
            'MerId' => $data['MerId'],
            'MerOrderNo' => $data['MerOrderNo'],
            'MerOrderTime' => $data['MerOrderTime'],
            'PayOrderNo' => $data['PayOrderNo'],
            'PayOrderTime' => $data['PayOrderTime'],
            'Fee' => $data['Fee'],
            'PayStatus' => $data['PayStatus'],
            'PayTime' => $data['PayTime'],

        ];

        if ($sign != $this->makeSign($_data, $config['AppKey'])) {
            return 'error';
        }
        if ($order['Status'] == 0) {
            if ($data['result'] == 'success') {
                $order['RealMoney'] = $data['data']['amount'];
                parent::Notify($order, $data, $config); // TODO: Change the autogenerated stub
                return 'success';
            } else {
                return 'error';
            }
        }

        return 'error';

    }

    public function makeSign($paramArr, $appSecret)
    {
        $sign = '';
        ksort($paramArr);
        foreach ($paramArr as $key => $val) {
            if ($key != '' && $val != '') {
                $sign .= '&' . $key . '=' . $val;
            }
        }
        $sign .= '&key=' . $appSecret;
        $sign = substr($sign, 1);
        $sign = strtoupper(md5($sign));
        return $sign;
    }

}