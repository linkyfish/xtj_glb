<?php

namespace Payment\Interfaces;

class Dayang extends Order
{


    public function create($usrid, $money, $Type, $config)
    {
        $order = parent::create($usrid, $money, $Type, $config); // TODO: Change the autogenerated stub
        $this->AppUrl = $config['AppUrl'];
        $PayType = 'alipay_operation';
        switch ($Type) {
            case 20:
                $PayType ='alipay_static_qrcode';
                break;

            default:
                $this->app->response('0001', [], '支付通道暂时关闭');

        }
        $pay_bankcode = "903" ;
        $formData = [
            "pay_memberid" => $config['AppID'],
            "pay_orderid" => $order['OrderNo'],
            "pay_amount" => bcmul($order['Money'],0.01,2),
            "pay_applydate" => date("Y-m-d H:i:s"),
            "pay_bankcode" => $pay_bankcode,
            "pay_notifyurl" => $this->NotifyUrl,
            "pay_callbackurl" => $this->ReturnUrl,
        ];

        $formData['pay_md5sign'] = $this->makeSign($formData,$config['AppKey']);
        $formData['pay_attach'] = "1234|456";
        $formData['pay_productname'] ='VIP基础服务';
        $formData['pay_return_type'] = "json";

        $data = $this->api('/Pay_Index.html', $formData, ['Content-Type' => 'application/x-www-form-urlencoded']);

        if ($data['status'] == 'ok' && !empty($data['data']['qrcode_url'])) {
            $this->app->response('0000', [], '下单成功', $data['data']['qrcode_url'], 302);
        } else {
            $this->app->response('0001', [], '下单失败');
        }
    }

    public function Ratify($order, $data, $config){


        $formData = [
            'merchant_user_id' => $config['AppID'],
            'out_trade_no' => $order['OrderNo'],
            "sign_type"=>"MD5",
        ];

        $formData['sign'] = $this->makeSign($formData,$config['AppKey']);

        $data = $this->api('/gateway/merchant/query', json_encode($formData), ['Content-Type' => 'application/json']);

        if ($data['code'] == 200 && !empty($data['data']['trade_order_no'])) {
            if(($data['data']['order_status']=='SUCCESS'||$data['data']['order_status']=='success') &&!empty($data['data']['pay_amount'])){
                $order['RealMoney'] = $data['data']['pay_amount']*100;
                parent::Notify($order, $data, $config); // TODO: Change the autogenerated stub
                $this->app->response('0000', [], '订单支付成功');
            }
            $this->app->response('0001', [], '订单尚未支付');
        } else {
            $this->app->response('0001', [], '订单查询失败');
        }
    }

    public function Notify($order, $data, $config)
    {
        if ($order['Status'] == 1) {
            return 'success';
        }
        $sign = $data['sign'];
        unset($data['sign']);
        $_data = [
            "memberid" => $data["memberid"], // 商户ID
            "orderid" =>  $data["orderid"], // 订单号
            "amount" =>  $data["amount"], // 交易金额
            "datetime" =>  $data["datetime"], // 交易时间
            "transaction_id" =>  $data["transaction_id"], // 支付流水号
            "returncode" => $data["returncode"],
        ];

        if ($sign != $this->makeSign($_data, $config['AppKey'])) {
            return 'error';
        }
        if ($order['Status'] == 0) {
            if ($data['returncode'] == '00') {
                $order['RealMoney'] = $data['amount']*100;
                parent::Notify($order, $data, $config); // TODO: Change the autogenerated stub
                return 'success';
            } else {
                return 'error';
            }
        }

        return 'error';

    }

    public function makeSign($paramArr, $appSecret)
    {
        unset($paramArr['sign']);
        $sign = '';
        ksort($paramArr);
        foreach ($paramArr as $key => $val) {
            if ($key != '' && $val != '') {
                $sign .= '&' . $key . '=' . $val;
            }
        }

        $sign = substr($sign, 1);
        $sign = strtoupper(md5($sign . "&key=" . $appSecret));
        return $sign;
    }

}