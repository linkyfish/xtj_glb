<?php

namespace Payment\Interfaces;

class Hongdacard extends Order
{


    public function create($usrid, $money, $Type, $config)
    {
        $order = parent::create($usrid, $money, $Type, $config); // TODO: Change the autogenerated stub
        $this->AppUrl = $config['AppUrl'];
        $PayType = 'ALI_CODE';
        switch ($Type) {
            case 20:
                $PayType = 'ALI_CODE';
                break;
            default:
                $this->app->response('0001', [], '支付通道暂时关闭');

        }

        $formData = [
            'mer_id' =>$config['AppID'],
            'timestamp' =>date('Y-m-d H:i:s'),
            'terminal' =>$PayType,
            'version' => '01',
            'amount' => bcmul($order['Money'],0.01,2)*100,
            'backurl' => $this->ReturnUrl,
            'failUrl' =>$this->FailUrl,
            'ServerUrl' => $this->NotifyUrl,
            'businessnumber' =>$order['OrderNo'],
            'goodsName' => '测试商品',
        ];
        $formData['sign'] = $this->makeSign($formData,$config['AppKey']);


        $formData['sign_type']  = 'md5';
        $data = $this->api('/customer.pay', $formData, ['Content-Type' => 'application/x-www-form-urlencoded']);
        if ($data['result'] == 'success') {
            $this->app->response('0000', [], '下单成功', $data['data']['trade_qrcode'], 302);
        } else {
            $this->app->response('0001', [], '下单失败');
        }
    }

    public function Ratify($order, $data, $config){


        $formData = [
            'merchant_user_id' => $config['AppID'],
            'out_trade_no' => $order['OrderNo'],
            "sign_type"=>"MD5",
        ];

        $formData['sign'] = $this->makeSign($formData,$config['AppKey']);

        $data = $this->api('/gateway/merchant/query', json_encode($formData), ['Content-Type' => 'application/json']);

        if ($data['code'] == 200 && !empty($data['data']['trade_order_no'])) {
            if(($data['data']['order_status']=='SUCCESS'||$data['data']['order_status']=='success') &&!empty($data['data']['pay_amount'])){
                $order['RealMoney'] = $data['data']['pay_amount']*100;
                parent::Notify($order, $data, $config); // TODO: Change the autogenerated stub
                $this->app->response('0000', [], '订单支付成功');
            }
            $this->app->response('0001', [], '订单尚未支付');
        } else {
            $this->app->response('0001', [], '订单查询失败');
        }
    }

    public function Notify($order, $data, $config)
    {
        //{"msg":"\u64cd\u4f5c\u6210\u529f","amount":"10000","code":"MSG_OK","transactiondate":"2020-03-02 17:47:05","mer_id":"15234","sign":"E4025D935BCC2C023E3477BB1DFEEE93","remark":"\u8ba2\u5355\u6210\u529f","transactiontype":"\u4ee3\u6536","result":"success","real_amount":"9800.00","businessnumber":"No5020200302174705e3fa88a6","inputdate":"2020-03-02 17:47:05","sign_type":"md5","status":"\u6210\u529f","0":"payment","1":"order","2":"notify","3":"10_465","rawContent":"msg=%E6%93%8D%E4%BD%9C%E6%88%90%E5%8A%9F&amount=10000&code=MSG_OK&transactiondate=2020-03-02+17%3A47%3A05&mer_id=15234&sign=E4025D935BCC2C023E3477BB1DFEEE93&remark=%E8%AE%A2%E5%8D%95%E6%88%90%E5%8A%9F&transactiontype=%E4%BB%A3%E6%94%B6&result=success&real_amount=9800.00&businessnumber=No5020200302174705e3fa88a6&inputdate=2020-03-02+17%3A47%3A05&sign_type=md5&status=%E6%88%90%E5%8A%9F"}
        if ($order['Status'] == 1) {
            return 'success';
        }

        $sign = $data['sign'];
        /*
        unset( $data['rawContent']);
        $_data = [
            'msg' => $data['msg'],
            'amount' => $data['amount'],
            'code' => $data['code'],
            'transactiondate' => $data['transactiondate'],
            'mer_id' => $data['mer_id'],
            'remark' => $data['remark'],
            'transactiontype' => $data['transactiontype'],
            'result' => $data['result'],
            'real_amount' => $data['real_amount'],
            'businessnumber' => $data['businessnumber'],
            'inputdate' => $data['inputdate'],
            'status' => $data['status'],
        ];
        if ($sign != $this->makeSign($_data, $config['AppKey'])) {
            xn_log('签名错'.json_encode($data),'sign_erro');
            return '签名错'.$this->makeSign($_data, $config['AppKey']);
        }
        */
        if ($order['Status'] == 0) {
            if($data['result']=='success')
            {
                $order['RealMoney'] = $data['amount'];
                parent::Notify($order, $data, $config); // TODO: Change the autogenerated stub
                return 'success';
            }
        }



        return 'error';

    }

    public function makeSign($paramArr, $appSecret)
    {
        //sign = 大写(md5(key1=value1& key2=value2&key3=value4&…key7=value7&密钥))
        unset($paramArr['sign_type']);
        unset($paramArr['sign']);
        $sign = '';
        ksort($paramArr);
        foreach ($paramArr as $key => $val) {
                $sign .= '&' . $key . '=' . $val;

        }
        $sign .= '&' . $appSecret;
        $sign = substr($sign, 1);
        $sign = strtoupper(md5($sign));

        return $sign;
    }

}