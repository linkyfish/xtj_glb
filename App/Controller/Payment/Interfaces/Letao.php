<?php

namespace Payment\Interfaces;

class Letao extends Order
{


    public function create($usrid, $money, $Type, $config)
    {
        $order = parent::create($usrid, $money, $Type, $config); // TODO: Change the autogenerated stub
        $this->AppUrl = $config['AppUrl'];
        $PayType = 'alipay';
        switch ($Type) {
            case 20:
                $PayType ='alipay';
                break;

            case 10:
                $PayType ='wechat';
                break;
            case 50:
                $PayType ='unionpay';
                break;

            default:
                $this->app->response('0001', [], '支付通道暂时关闭');

        }

        $formData = [
            'OrderMoney' => bcmul($order['Money'],0.01,2),
            'PosUid' => $config['AppID'],
            'OrderNo' => $order['OrderNo'],
             'OrderNotify' => $this->NotifyUrl,
            "OrderType"=>$PayType,
        ];

        $formData['Sign'] = $this->makeSign($formData,$config['AppKey']);
       // return $formData['Sign'];
        $data = $this->api('/pay', $formData,['Content-Type' => 'application/x-www-form-urlencoded']);
        if ($data['code'] == 200 && !empty($data['url'])) {
            //$this->app->Order->update(['ID' => $order['ID']], ['PayOrderNo' => $data['data']['trade_order_no']]);
            $this->app->response('0000', [], '下单成功', $data['url'], 302);
        } else {
            $this->app->response('0001', [], '下单失败');
        }
    }

    public function Ratify($order, $data, $config){


        $formData = [
            'merchant_user_id' => $config['AppID'],
            'out_trade_no' => $order['OrderNo'],
            "sign_type"=>"MD5",
        ];

        $formData['sign'] = $this->makeSign($formData,$config['AppKey']);

        $data = $this->api('/gateway/merchant/query', json_encode($formData), ['Content-Type' => 'application/json']);

        if ($data['code'] == 200 && !empty($data['data']['trade_order_no'])) {
            if(($data['data']['order_status']=='SUCCESS'||$data['data']['order_status']=='success') &&!empty($data['data']['pay_amount'])){
                $order['RealMoney'] = $data['data']['pay_amount']*100;
                parent::Notify($order, $data, $config); // TODO: Change the autogenerated stub
                $this->app->response('0000', [], '订单支付成功');
            }
            $this->app->response('0001', [], '订单尚未支付');
        } else {
            $this->app->response('0001', [], '订单查询失败');
        }
    }

    public function Notify($order, $data, $config)
    {
        if ($order['Status'] == 1) {
            return 'success';
        }
        $sign = $data['Sign'];
        unset($data['Sign']);
        $_data = [
            'OrderMoney' => $data['OrderMoney'],
            'PosUid' => $data['PosUid'],
            'OrderNo' => $data['OrderNo'],
            'OrderId'=>$data['OrderId'],
        ];

        if ($sign != $this->makeSign($_data, $config['AppKey'])) {
            return 'failed';
        }

        if ($order['Status'] == 0) {
            if ($order['Money'] == $data['OrderMoney']*100) {
                $order['RealMoney'] = $data['OrderMoney']*100;
                parent::Notify($order, $data, $config); // TODO: Change the autogenerated stub
                return 'success';
            } else {
                return 'failed';
            }
        }

        return 'error';

    }

    public function makeSign($paramArr, $appSecret)
    {
        unset($paramArr['sign_type']);
        unset($paramArr['Sign']);
        unset($paramArr['OrderType']);
        unset($paramArr['OrderNotify']);


        $sign = '';
        ksort($paramArr);
        foreach ($paramArr as $key => $val) {
            if ($key != '' && $val != '') {
                $sign .= '&' . $key . '=' . $val;
            }
        }
        $sign .= '&Key='.$appSecret;
        $sign = substr($sign, 1);
        $sign = md5($sign);
        return $sign;
    }

}