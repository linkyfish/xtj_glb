<?php

namespace Payment\Interfaces;

class Weiyi extends Order
{


    public function create($usrid, $money, $Type, $config)
    {
        $order = parent::create($usrid, $money, $Type, $config); // TODO: Change the autogenerated stub
        $this->AppUrl = $config['AppUrl'];
        $PayType = 32;
        switch ($Type) {
            case 20:
                $PayType =32;
                break;
            default:
                $this->app->response('0001', [], '支付通道暂时关闭');
        }
        $formData = [
            'MemberId' => intval($config['AppID']),
            'OrderId' => $order['OrderNo'],
            'PayType' => $PayType,
            'NotifyUrl' => $this->NotifyUrl,
            'CallbackUrl' => $this->ReturnUrl,
            'Amount' => bcmul($order['Money'],0.01,2),
            'Date'=>date('Y-m-d H:i:s'),
            'GoodsName'=>'测试商品',
            'ReturnType'=>1
        ];

        $formData['sign'] = $this->makeSign($formData,$config['AppKey']);


        $data = $this->api('/Pay_Order_create.html', $formData,['Content-Type' => 'application/x-www-form-urlencoded']);

        if ($data['status'] == 'success' && !empty($data['data']['url'])) {
            $this->app->response('0000', [], '下单成功', $data['data']['url'], 302);
        } else {
            $this->app->response('0001', [], '下单失败');
        }
    }

    public function Ratify($order, $data, $config){


        $formData = [
            'merchant_user_id' => $config['AppID'],
            'out_trade_no' => $order['OrderNo'],
            "sign_type"=>"MD5",
        ];

        $formData['sign'] = $this->makeSign($formData,$config['AppKey']);

        $data = $this->api('/gateway/merchant/query', json_encode($formData), ['Content-Type' => 'application/json']);

        if ($data['code'] == 200 && !empty($data['data']['trade_order_no'])) {
            if(($data['data']['order_status']=='SUCCESS'||$data['data']['order_status']=='success') &&!empty($data['data']['pay_amount'])){
                $order['RealMoney'] = $data['data']['pay_amount']*100;
                parent::Notify($order, $data, $config); // TODO: Change the autogenerated stub
                $this->app->response('0000', [], '订单支付成功');
            }
            $this->app->response('0001', [], '订单尚未支付');
        } else {
            $this->app->response('0001', [], '订单查询失败');
        }
    }

    public function Notify($order, $data, $config)
    {
        if ($order['Status'] == 1) {
            return 'SUCCESS';
        }
        $data =  json_decode($data['rawContent'],true);
        $sign = $data['sign'];
        unset($data['sign']);
        $_data = [
            'mch_id' => $config['AppID'],
            'money' => $data['money'],
            'trade_no' => $data['trade_no'],
            'out_trade_no' => $data['out_trade_no'],
        ];

        if ($sign == $this->makeSign($_data, $config['AppKey'])) {
            if ($order['Status'] == 0) {
                $order['RealMoney'] = $data['money']*100;
                parent::Notify($order, $data, $config); // TODO: Change the autogenerated stub
                return 'SUCCESS';
            }
        }


    }

    public function makeSign($paramArr, $appSecret)
    {
        unset($paramArr['sign']);
        $sign = '';
        ksort($paramArr);
        foreach ($paramArr as $key => $val) {
            if ($key != '' && $val != '') {
                $sign .=   $key . '=' . $val.'&';
            }
        }
        $sign = trim($sign, "&");
        $sign = strtoupper(md5($sign . $appSecret));

        return $sign;
    }



}