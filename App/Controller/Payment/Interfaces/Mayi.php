<?php

namespace Payment\Interfaces;

class Mayi extends Order
{


    public function create($usrid, $money, $Type, $config)
    {
        $order = parent::create($usrid, $money, $Type, $config); // TODO: Change the autogenerated stub
        $this->AppUrl = $config['AppUrl'];
        $PayType = '1';
        switch ($Type) {
            case 20:
                $PayType ='1';
                break;
            case 10:

                $PayType ='2';
                break;
            default:
                $this->app->response('0001', [], '支付通道暂时关闭');
        }
        $formData = [
            'body' => '测试',
            'mch_id' => $config['AppID'],
            'money' => bcmul($order['Money'],0.01,2),
            'notify_url' => $this->NotifyUrl,
            'out_trade_no' => $order['OrderNo'],
            'return_url' => $this->ReturnUrl,
            'subject' => '测试',
            'timestamp'=>time(),
            'type'=>$PayType
        ];

        $formData['sign'] = $this->makeSign($formData,$config['AppKey']);


        $data = $this->api('/api/pay/unifiedorder', $formData,['Content-Type' => 'application/x-www-form-urlencoded']);

        if ($data['code'] == 1 && !empty($data['data']['url'])) {
            $this->app->Order->update(['ID' => $order['ID']], ['PayOrderNo' => $data['data']['trade_order_no']]);
            $this->app->response('0000', [], '下单成功', $data['data']['url'], 302);
        } else {
            $this->app->response('0001', [], '下单失败');
        }
    }

    public function Ratify($order, $data, $config){


        $formData = [
            'merchant_user_id' => $config['AppID'],
            'out_trade_no' => $order['OrderNo'],
            "sign_type"=>"MD5",
        ];

        $formData['sign'] = $this->makeSign($formData,$config['AppKey']);

        $data = $this->api('/gateway/merchant/query', json_encode($formData), ['Content-Type' => 'application/json']);

        if ($data['code'] == 200 && !empty($data['data']['trade_order_no'])) {
            if(($data['data']['order_status']=='SUCCESS'||$data['data']['order_status']=='success') &&!empty($data['data']['pay_amount'])){
                $order['RealMoney'] = $data['data']['pay_amount']*100;
                parent::Notify($order, $data, $config); // TODO: Change the autogenerated stub
                $this->app->response('0000', [], '订单支付成功');
            }
            $this->app->response('0001', [], '订单尚未支付');
        } else {
            $this->app->response('0001', [], '订单查询失败');
        }
    }

    public function Notify($order, $data, $config)
    {
        if ($order['Status'] == 1) {
            return 'SUCCESS';
        }
        $data =  json_decode($data['rawContent'],true);
        $sign = $data['sign'];
        unset($data['sign']);
        $_data = [
            'mch_id' => $config['AppID'],
            'money' => $data['money'],
            'trade_no' => $data['trade_no'],
            'out_trade_no' => $data['out_trade_no'],
        ];

        if ($sign == $this->makeSign($_data, $config['AppKey'])) {
            if ($order['Status'] == 0) {
                $order['RealMoney'] = $data['money']*100;
                parent::Notify($order, $data, $config); // TODO: Change the autogenerated stub
                return 'SUCCESS';
            }
        }


    }

    public function makeSign($paramArr, $appSecret)
    {
        unset($paramArr['sign']);
        $sign = '';
        ksort($paramArr);
        foreach ($paramArr as $key => $val) {
            if ($key != '' && $val != '') {
                $sign .=   $key . '=' . $val.'&';
            }
        }
        $sign = trim($sign, "&");
        $sign = md5($sign . "&key=" . $appSecret);
        return $sign;
    }

    function sorting($array)
    {
        $buff = "";
        foreach ($array as $k => $v)
        {
            if($k != "sign" && $v != "" && !is_array($v)){
                $buff .= $k . "=" . $v . "&";
            }
        }

        $buff = trim($buff, "&");
        return $buff;
    }

    /**
     * 生成签名
     * @param  array  $array 参数数组
     * @param  string $key   商户密钥
     * @return string
     */
    /*
    function makeSign($array, $key){
        // 签名步骤一：按字典序排序参数
        ksort($array);
        $string = $this->sorting($array);
        // 签名步骤二：在string后加入KEY
        $string = $string . "&key=".$key;
        // 签名步骤三：MD5加密
        $result = md5($string);

        return $result;
    }
    */

}