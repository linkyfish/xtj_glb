<?php

namespace Payment\Interfaces;

class Yunzhifu extends Order
{


    public function create($usrid, $money, $Type, $config)
    {
        $order = parent::create($usrid, $money, $Type, $config); // TODO: Change the autogenerated stub
        $this->AppUrl = $config['AppUrl'];
        $PayType = 'alipay_qrcode_auto';
        switch ($Type) {
            case 20:
                $PayType ='alipay_qrcode_auto';
                break;
            default:
                $this->app->response('0001', [], '支付通道暂时关闭');
        }
        list($msec, $sec) = explode(' ', microtime());
        $msectime = (float)sprintf('%.0f', (floatval($msec) + floatval($sec)) * 1000);

        $formData = [
            'uid' => $config['AppID'] ,
            'money' => bcmul($order['Money'],0.01,2),
            'channel'=>$PayType,
            'outTradeNo' => $order['OrderNo'],
            'notifyUrl' => $this->NotifyUrl,
            'returnUrl' => $this->ReturnUrl,
            'token' => $config['AppKey'],
            'timestamp'=>$msectime,
        ];

        $formData['sign'] = $this->makeSign($formData,$config['AppKey']);



        $data = $this->api('/api/v1/charges', $formData,['Content-Type' => 'application/x-www-form-urlencoded']);

        if ($data['code'] == 0 && !empty($data['data']['payUrl'])) {
            $this->app->Order->update(['ID' => $order['ID']], ['PayOrderNo' => $data['data']['tradeNo']]);
            $this->app->response('0000', [], '下单成功', $data['data']['payUrl'], 302);
        } else {
            $this->app->response('0001', [], '下单失败');
        }
    }

    public function Ratify($order, $data, $config){


        $formData = [
            'merchant_user_id' => $config['AppID'],
            'out_trade_no' => $order['OrderNo'],
            "sign_type"=>"MD5",
        ];

        $formData['sign'] = $this->makeSign($formData,$config['AppKey']);
        $data = $this->api('/gateway/merchant/query', json_encode($formData), ['Content-Type' => 'application/json']);
        if ($data['code'] == 200 && !empty($data['data']['trade_order_no'])) {
            if(($data['data']['order_status']=='SUCCESS'||$data['data']['order_status']=='success') &&!empty($data['data']['pay_amount'])){
                $order['RealMoney'] = $data['data']['pay_amount']*100;
                parent::Notify($order, $data, $config); // TODO: Change the autogenerated stub
                $this->app->response('0000', [], '订单支付成功');
            }
            $this->app->response('0001', [], '订单尚未支付');
        } else {
            $this->app->response('0001', [], '订单查询失败');
        }
    }

    public function Notify($order, $data, $config)
    {
        if ($order['Status'] == 1) {
            return 'SUCCESS';
        }
        $sign = $data['sign'];
        unset($data['sign']);
        $_data = [
            'channel' => $data['channel'],
            'tradeNo' =>$data['tradeNo'],
            'outTradeNo'=>$data['outTradeNo'],
            'money' => $data['money'],
            'realMoney' =>$data['realMoney'],
            'uid' => $config['AppID'] ,
            'token' => $config['AppKey'],
        ];

        if ($sign == $this->makeSign($_data, $config['AppKey'])) {
            if ($order['Status'] == 0) {
                $order['RealMoney'] = $data['money']*100;
                parent::Notify($order, $data, $config); // TODO: Change the autogenerated stub
                return 'SUCCESS';
            }
        }
        else{
            return '签名错误';
        }


    }

    public function makeSign($paramArr, $appSecret)
    {
        unset($paramArr['sign']);
        $sign = '';
        ksort($paramArr);
        foreach ($paramArr as $key => $val) {
            if ($key != '' && $val != '') {
                $sign .=   $key . '=' . $val.'&';
            }
        }
        $sign = trim($sign, "&");
       // $this->app->response('0001', [],       $sign);
        $sign =  strtoupper( md5($sign ));

        return $sign;
    }



}