<?php

namespace Payment\Interfaces;

class Grace extends Order
{

    public function create($usrid, $money, $Type, $config)
    {
        $order = parent::create($usrid, $money, $Type, $config); // TODO: Change the autogenerated stub
        $this->AppUrl = $config['AppUrl'];
        $PayType = '1';
        switch ($Type) {
            case 20:
                $PayType ='1';
                break;
            case 10:
                $PayType ='11';
                break;
            default:
                $this->app->response('0001', [], '支付通道暂时关闭');
        }
        $formData = [
            'merchant_id' => $config['AppID'],
            'amount' => bcmul($order['Money'],0.01,2),
            'callbackurl' => $this->NotifyUrl,
            'order' => $order['OrderNo'],
            'paytype'=>$PayType,
            'posttime' => time(),
            'key' => $config['AppKey'],
        ];

        $formData['sign'] = $this->makePostSign($formData,$config);
        $tjurl = $config['AppUrl'].'/Api/gateway.php';
        //xn_log(json_encode($formData),'grace');
        return $this->app->View(get_defined_vars(),'Order.Tiancheng');
    }

    public function Ratify($order, $data, $config){


        $formData = [
            'merchant_user_id' => $config['AppID'],
            'out_trade_no' => $order['OrderNo'],
            "sign_type"=>"MD5",
        ];

        $formData['sign'] = $this->makeSign($formData,$config['AppKey']);

        $data = $this->api('/Api/gateway.php', json_encode($formData), ['Content-Type' => 'application/json']);

        if ($data['code'] == 200 && !empty($data['data']['trade_order_no'])) {
            if(($data['data']['order_status']=='SUCCESS'||$data['data']['order_status']=='success') &&!empty($data['data']['pay_amount'])){
                $order['RealMoney'] = $data['data']['pay_amount']*100;
                parent::Notify($order, $data, $config); // TODO: Change the autogenerated stub
                $this->app->response('0000', [], '订单支付成功');
            }
            $this->app->response('0001', [], '订单尚未支付');
        } else {
            $this->app->response('0001', [], '订单查询失败');
        }
    }

    public function Notify($order, $data, $config)
    {
        if ($order['Status'] == 1) {
            return 'SUCCESS';
        }
       // $data =  json_decode($data['rawContent'],true);
        $sign = $data['sign'];
        unset($data['sign']);
        $_data = [
            'merchant_id' => $config['AppID'],
            'amount' => $data['amount'],
            'order' => $data['order'],
            'paytype' => $data['paytype'],
        ];

        if ($sign == $this->makeNotifySign($_data, $config)) {

            if($data['state'] =='success')
            {
                if ($order['Status'] == 0) {
                    $order['RealMoney'] = $data['amount']*100;
                    parent::Notify($order, $data, $config); // TODO: Change the autogenerated stub
                    return 'SUCCESS';
                }
            }
            else{
                return 'fail';
            }

        }
        else{
            return 'fail';
        }


    }


    public function makePostSign($paramArr, $config)
    {

        $sign=md5(md5("merchant_id={$paramArr['merchant_id']}&amount={$paramArr['amount']}&callbackurl={$paramArr['callbackurl']}&order={$paramArr['order']}&paytype={$paramArr['paytype']}&posttime={$paramArr['posttime']}&key={$config['AppKey']}").$config['AppSess']);
        return $sign;

    }

    public function makeNotifySign($paramArr, $config)
    {
        $sign=md5(md5("merchant_id={$paramArr['merchant_id']}&amount={$paramArr['amount']}&order={$paramArr['order']}&paytype={$paramArr['paytype']}&key={$config['AppKey']}").$config['AppSess']);
        return $sign;
    }


}