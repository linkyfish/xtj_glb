<?php
namespace Model;
// hook model_user_use.php
use App\Model;

class UserModel extends Model
{
    // hook model_user_public_start.php
    public $table = 'user';
    public $index = 'id';
    public $is_delete = 'is_deleted';
    public $level_char ='ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    // hook model_user_public_end.php

    // hook model_user_start.php

    public function read_by_id($id, $reload = 0)
    {
        // hook model_user_read_by_id_start.php
        $user = $this->CacheGet('user_' . $id);
        if (empty($user['id']) || $reload) {
            $user = $this->read(['id' => $id]);
            // hook model_user_read_by_id_cache_before.php
            if (!empty($user['id'])) {
                $this->CacheSet('user_' . $id, $user,600);
            } else {
                $this->CacheDel('user_' . $id);
            }
            // hook model_user_read_by_id_cache_after.php
        }
        // hook model_user_read_by_id_end.php
        return $user;
    }

    public function read_by_username($username)
    {
        // hook model_user_read_by_username_start.php
        $user = $this->read(['username' => $username], 'id');
        if (!empty($user['id'])) {
            $user = $this->read_by_id($user['id']);
        } else {
            $user = [];
        }
        // hook model_user_read_by_username_end.php
        return $user;
    }

    public function update($cond, $data)
    {
        // hook model_user_update_start.php
        $r = parent::update($cond, $data); // TODO: Change the autogenerated stub
        $list = $this->select($cond, [], 'id');
        foreach ($list as $v) {
            $this->read_by_id($v['id'], 1);
        }
        return $r;
        // hook model_user_update_end.php
    }

    public function delete($cond)
    {
        // hook model_user_delete_start.php
        $r = parent::delete($cond); // TODO: Change the autogenerated stub
        $list = $this->select($cond, [], 'id');
        foreach ($list as $v) {
            $this->read_by_id($v['id'], 1);
        }
        return $r;
        // hook model_user_delete_end.php
    }



    public function format($v,$role){
        $vv['idx'] = $v['id'];
        $vv['Name'] = $v['nickname'];
        $vv['Redme'] = $v['Redme'] ? $v['Redme'] : "N/A";
        $vv['UserShareRate'] =$role['zc'] ? $v['share_rate']:'-';
        $vv['wechatID'] =$role['ls']? $v['wechat']:'-';
        $vv['Tel'] = $role['ls'] ? ($v['phone'] ? $v['phone'] : "N/A"):'-';
        $vv['Status'] = $v['status'];
        $vv['BankAddress'] =$role['yh'] ? ($v['bankSon'] ? $v['bankSon'] : "N/A"):'-';
        $vv['BankCardID'] =$role['yh'] ? ( $v['bankNo'] ? $v['bankNo'] : "N/A"):'-';
        $vv['LimitNum'] = $v['IsEnable'];
        $vv['IsPromotion'] = $v['RoleID'] == 9;
        $vv['Account'] = $v['username'];
        $vv['InviteCode'] = str_pad($v['code'], 6, 0, STR_PAD_LEFT);
        return $vv;
    }

    public function MakeName($agent,$userName=''){
        $level_char = $this->level_char;
        if ($agent['RoleID'] == 2) {
            $add['username']=$userName;
            $add['level_num']=1;
            $add['level_char']=-1;
            $add['level_way'] = $this->Max('level_way', ['level_char' => -2, 'level_num' => 1]);
//        } elseif ($agent['level_num'] == 1 && $agent['level_char']==-1) {
////            $num = $this->count(['level_num' => 2,'RoleID'=>11]);
////            $add['level_num']=2;
////            $level = $num+7;
////            if($level>23){
////                $add['username']='限制';
////            }
////            $add['level_char']=$level_char{$level};
////            $add['username'] = $add['level_char'];
////            $add['username'] .= 'GLH0001' ;
        } else {
            //$pre = ucfirst(substr($agent['level_char'],0,1));
            $level = strpos($level_char, substr($agent['level_char'],1,1)) ;
            $level = $level===false ? 0:$level+1;
            $add['level_char']=_CONF('agent_prefit').$level_char{$level};
            $cond = ['level_char' => $add['level_char']];

            $agent['level_way'] AND $cond['level_way'] = ['RLIKE'=>$agent['level_way']];
            $cond['level_num']=$agent['level_num']+1;
            $cond['RoleID']=11;
            $num = $this->count($cond);
            $add['level_num'] =$agent['level_num'] + 1;
            $add['level_way']= str_pad($agent['level_way'], max(2, ($level+1)  * 2), 0, STR_PAD_LEFT). str_pad($num + 1, 2, 0, STR_PAD_LEFT) ;
            $add['username'] = $add['level_char'];
            $add['username'] .= 'GL' . $add['level_way'];

        }
        return $add;
    }

    public function user_safe_info($user)
    {

        // hook model_user_user_safe_info_start.php

        unset($user['password']);
        unset($user['email']);
        unset($user['salt']);
        unset($user['realname']);
        unset($user['qq']);
        unset($user['mobile']);
        unset($user['create_ip']);
        unset($user['create_ip_fmt']);
        unset($user['create_date']);
        unset($user['create_date_fmt']);
        unset($user['login_ip']);
        unset($user['login_date']);
        unset($user['login_ip_fmt']);
        unset($user['login_date_fmt']);
        unset($user['logins']);

        // hook model_user_user_safe_info_end.php

        return $user;
    }


    // hook model_user_end.php
}

?>